import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Container,
  Tabs,
  Tab,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  CircularProgress,
  Alert,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  TextField,
  InputAdornment,
  IconButton,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  Grid,
  Tooltip,
} from '@mui/material';
import { useAuth } from '../context/AuthContext';
import { supabase } from '../services/supabase';
import { useNavigate } from 'react-router-dom';
import { Refresh as RefreshIcon, Search as SearchIcon, Visibility as VisibilityIcon, Delete as DeleteIcon } from '@mui/icons-material';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel = (props: TabPanelProps) => {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`admin-tabpanel-${index}`}
      aria-labelledby={`admin-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
};

// Define an interface for the column data
interface TableColumn {
  column_name: string;
  data_type: string;
  is_nullable: string;
}

const AdminDashboard: React.FC = () => {
  const { user, signOut, forceRefreshAuth } = useAuth();
  const navigate = useNavigate();
  const [tabValue, setTabValue] = useState(0);
  const [petitions, setPetitions] = useState<any[]>([]);
  const [filteredPetitions, setFilteredPetitions] = useState<any[]>([]);
  const [signatures, setSignatures] = useState<any[]>([]);
  const [filteredSignatures, setFilteredSignatures] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState<{ id: string, type: 'petition' | 'signature' } | null>(null);
  const [loadingRetries, setLoadingRetries] = useState(0);
  
  // Filter states
  const [petitionSearchTerm, setPetitionSearchTerm] = useState('');
  const [petitionSortBy, setPetitionSortBy] = useState('created_at');
  const [petitionSortOrder, setPetitionSortOrder] = useState<'asc' | 'desc'>('desc');
  
  const [signatureSearchTerm, setSignatureSearchTerm] = useState('');
  const [signatureSortBy, setSignatureSortBy] = useState('created_at');
  const [signatureSortOrder, setSignatureSortOrder] = useState<'asc' | 'desc'>('desc');

  useEffect(() => {
    fetchData();
    
    // Set a timeout to prevent infinite loading
    const timer = setTimeout(() => {
      if (loading && loadingRetries < 3) {
        console.log(`AdminDashboard - Loading timed out, retrying (${loadingRetries + 1}/3)...`);
        setLoadingRetries(prev => prev + 1);
        setLoading(false); // Reset loading state to trigger a retry
      } else if (loading && loadingRetries >= 3) {
        console.log('AdminDashboard - Loading timed out after 3 retries');
        setLoading(false);
        setError('Failed to load data after multiple attempts. Please try refreshing the page.');
      }
    }, 10000); // 10 second timeout

    return () => clearTimeout(timer);
  }, [loadingRetries]);

  // Apply filters to petitions
  useEffect(() => {
    if (petitions.length > 0) {
      let filtered = [...petitions];
      
      // Apply search filter
      if (petitionSearchTerm) {
        const searchLower = petitionSearchTerm.toLowerCase();
        filtered = filtered.filter(petition => 
          (petition.title && petition.title.toLowerCase().includes(searchLower)) ||
          (petition.story && petition.story.toLowerCase().includes(searchLower)) ||
          String(petition.goal).includes(searchLower) ||
          String(petition.signature_count).includes(searchLower)
        );
      }
      
      // Apply sorting
      filtered.sort((a, b) => {
        let valueA = a[petitionSortBy];
        let valueB = b[petitionSortBy];
        
        // Handle string comparison
        if (typeof valueA === 'string') {
          valueA = valueA.toLowerCase();
          valueB = valueB.toLowerCase();
        }
        
        // Handle null/undefined values
        if (valueA === undefined || valueA === null) return petitionSortOrder === 'asc' ? -1 : 1;
        if (valueB === undefined || valueB === null) return petitionSortOrder === 'asc' ? 1 : -1;
        
        if (valueA < valueB) return petitionSortOrder === 'asc' ? -1 : 1;
        if (valueA > valueB) return petitionSortOrder === 'asc' ? 1 : -1;
        return 0;
      });
      
      setFilteredPetitions(filtered);
    }
  }, [petitions, petitionSearchTerm, petitionSortBy, petitionSortOrder]);

  // Apply filters to signatures
  useEffect(() => {
    if (signatures.length > 0) {
      let filtered = [...signatures];
      
      // Apply search filter
      if (signatureSearchTerm) {
        const searchTermLower = signatureSearchTerm.toLowerCase();
        filtered = filtered.filter(signature => 
          (signature.first_name && signature.first_name.toLowerCase().includes(searchTermLower)) ||
          (signature.last_name && signature.last_name.toLowerCase().includes(searchTermLower)) ||
          (signature.email && signature.email.toLowerCase().includes(searchTermLower)) ||
          (signature.location_city && signature.location_city.toLowerCase().includes(searchTermLower)) ||
          (signature.phone && signature.phone.toLowerCase().includes(searchTermLower)) ||
          (signature.zip_code && signature.zip_code.toLowerCase().includes(searchTermLower))
        );
      }
      
      // Apply sorting
      if (signatureSortBy) {
        filtered.sort((a, b) => {
          let valueA = a[signatureSortBy] || '';
          let valueB = b[signatureSortBy] || '';
          
          if (typeof valueA === 'string') valueA = valueA.toLowerCase();
          if (typeof valueB === 'string') valueB = valueB.toLowerCase();
          
          if (valueA < valueB) return signatureSortOrder === 'asc' ? -1 : 1;
          if (valueA > valueB) return signatureSortOrder === 'asc' ? 1 : -1;
          return 0;
        });
      }
      
      setFilteredSignatures(filtered);
    }
  }, [signatures, signatureSearchTerm, signatureSortBy, signatureSortOrder]);

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('Fetching data for admin dashboard...');
      
      // Fetch petitions
      const { data: petitionsData, error: petitionsError } = await supabase
        .from('petitions')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (petitionsError) {
        console.error('Error fetching petitions:', petitionsError);
        throw petitionsError;
      }
      
      console.log('Fetched petitions:', petitionsData);
      
      // First check if the signatures table has the new columns
      const { data: columnsData, error: columnsError } = await supabase
        .rpc('get_table_columns', { table_name: 'signatures' });
      
      if (columnsError) {
        console.error('Error checking table columns:', columnsError);
        // Fall back to basic columns if we can't check
        const { data: signaturesData, error: signaturesError } = await supabase
          .from('signatures')
          .select('id, petition_id, first_name, last_name, email, created_at')
          .order('created_at', { ascending: false });
        
        if (signaturesError) {
          console.error('Error fetching signatures:', signaturesError);
          throw signaturesError;
        }
        
        console.log('Fetched signatures with basic columns:', signaturesData);
        setSignatures(signaturesData || []);
      } else {
        // Build a dynamic select statement based on available columns
        const columns = columnsData || [] as TableColumn[];
        const columnNames = columns.map((col: TableColumn) => col.column_name);
        
        // Base columns that should always exist
        let selectStatement = 'id, petition_id, first_name, last_name, email, created_at';
        
        // Add optional columns if they exist
        if (columnNames.includes('phone')) selectStatement += ', phone';
        if (columnNames.includes('zip_code')) selectStatement += ', zip_code';
        if (columnNames.includes('ip_address')) selectStatement += ', ip_address';
        if (columnNames.includes('location_city')) selectStatement += ', location_city';
        if (columnNames.includes('location_region')) selectStatement += ', location_region';
        if (columnNames.includes('location_country')) selectStatement += ', location_country';
        if (columnNames.includes('location_latitude')) selectStatement += ', location_latitude';
        if (columnNames.includes('location_longitude')) selectStatement += ', location_longitude';
        if (columnNames.includes('browser')) selectStatement += ', browser';
        if (columnNames.includes('device_type')) selectStatement += ', device_type';
        if (columnNames.includes('screen_resolution')) selectStatement += ', screen_resolution';
        if (columnNames.includes('timezone')) selectStatement += ', timezone';
        if (columnNames.includes('language')) selectStatement += ', language';
        if (columnNames.includes('submission_date')) selectStatement += ', submission_date';
        
        console.log('Using select statement:', selectStatement);
        
        // Fetch signatures with available columns
        const { data: signaturesData, error: signaturesError } = await supabase
          .from('signatures')
          .select(selectStatement)
          .order('created_at', { ascending: false });
        
        if (signaturesError) {
          console.error('Error fetching signatures:', signaturesError);
          throw signaturesError;
        }
        
        console.log('Fetched signatures with available columns:', signaturesData);
        setSignatures(signaturesData || []);
      }
      
      // Update signature counts for each petition
      const petitionsWithUpdatedCounts = await Promise.all((petitionsData || []).map(async (petition) => {
        // Count signatures for this petition
        const { count, error: countError } = await supabase
          .from('signatures')
          .select('*', { count: 'exact', head: true })
          .eq('petition_id', petition.id);
          
        if (countError) {
          console.error(`Error counting signatures for petition ${petition.id}:`, countError);
          return petition;
        }
        
        return {
          ...petition,
          signature_count: count || 0
        };
      }));
      
      setPetitions(petitionsWithUpdatedCounts || []);
    } catch (error: any) {
      console.error('Error fetching data:', error);
      setError(error.message || 'Failed to fetch data');
    } finally {
      setLoading(false);
    }
  };

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleSignOut = async () => {
    await signOut();
    navigate('/admin/login');
  };

  const handleDeleteClick = (id: string, type: 'petition' | 'signature') => {
    setItemToDelete({ id, type });
    setDeleteDialogOpen(true);
  };

  const handleDeleteConfirm = async () => {
    if (!itemToDelete) return;
    
    try {
      if (itemToDelete.type === 'petition') {
        const { error } = await supabase
          .from('petitions')
          .delete()
          .eq('id', itemToDelete.id);
        
        if (error) throw error;
        
        setPetitions(petitions.filter(petition => petition.id !== itemToDelete.id));
      } else {
        const { error } = await supabase
          .from('signatures')
          .delete()
          .eq('id', itemToDelete.id);
        
        if (error) throw error;
        
        setSignatures(signatures.filter(signature => signature.id !== itemToDelete.id));
      }
    } catch (error: any) {
      console.error('Error deleting item:', error);
      setError(error.message || 'Failed to delete item');
    } finally {
      setDeleteDialogOpen(false);
      setItemToDelete(null);
    }
  };

  const handleDeleteCancel = () => {
    setDeleteDialogOpen(false);
    setItemToDelete(null);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  // Add a function to handle viewing a petition
  const handleViewPetition = (id: string) => {
    navigate(`/share/${id}`);
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <CircularProgress />
        <Typography variant="body1" sx={{ mt: 2 }}>
          Loading dashboard data...
        </Typography>
        <Button 
          variant="text" 
          color="primary" 
          sx={{ mt: 2 }}
          onClick={() => {
            setLoading(false);
            forceRefreshAuth();
            setTimeout(() => fetchData(), 500);
          }}
        >
          Taking too long? Click to retry
        </Button>
      </Box>
    );
  }

  return (
    <Container maxWidth="lg">
      <Paper elevation={3} sx={{ p: 3, mt: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Typography variant="h4" component="h1">
            Admin Dashboard
          </Typography>
          
          <Box>
            <Typography variant="body2" sx={{ mb: 1 }}>
              Logged in as: {user?.email}
            </Typography>
            <Button 
              variant="contained" 
              color="secondary" 
              size="small"
              onClick={handleSignOut}
              sx={{ 
                color: '#fff',
                backgroundColor: '#E0AC3F',
                '&:hover': {
                  backgroundColor: '#c99a38'
                }
              }}
            >
              Sign Out
            </Button>
          </Box>
        </Box>
        
        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
        )}
        
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={handleTabChange} aria-label="admin tabs">
            <Tab label="Petitions" />
            <Tab label="Signatures" />
          </Tabs>
        </Box>
        
        <TabPanel value={tabValue} index={0}>
          <Box sx={{ mb: 3 }}>
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} md={4}>
                <TextField
                  fullWidth
                  label="Search Petitions"
                  variant="outlined"
                  size="small"
                  value={petitionSearchTerm}
                  onChange={(e) => setPetitionSearchTerm(e.target.value)}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <SearchIcon />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={3}>
                <FormControl fullWidth size="small">
                  <InputLabel>Sort By</InputLabel>
                  <Select
                    value={petitionSortBy}
                    label="Sort By"
                    onChange={(e) => setPetitionSortBy(e.target.value)}
                  >
                    <MenuItem value="created_at">Date Created</MenuItem>
                    <MenuItem value="signature_count">Signature Count</MenuItem>
                    <MenuItem value="goal">Goal</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} md={3}>
                <FormControl fullWidth size="small">
                  <InputLabel>Order</InputLabel>
                  <Select
                    value={petitionSortOrder}
                    label="Order"
                    onChange={(e) => setPetitionSortOrder(e.target.value as 'asc' | 'desc')}
                  >
                    <MenuItem value="asc">Ascending</MenuItem>
                    <MenuItem value="desc">Descending</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} md={2}>
                <Button 
                  variant="contained" 
                  color="primary"
                  fullWidth
                  onClick={fetchData}
                  sx={{ 
                    color: '#fff',
                    backgroundColor: '#01BD9B',
                    '&:hover': {
                      backgroundColor: '#01a989'
                    }
                  }}
                  startIcon={<RefreshIcon />}
                >
                  Refresh
                </Button>
              </Grid>
            </Grid>
          </Box>
          
          <Box sx={{ mb: 2 }}>
            <Typography variant="h6">
              All Petitions ({filteredPetitions.length})
            </Typography>
          </Box>
          
          <TableContainer component={Paper} sx={{ mb: 4 }}>
            <Table>
              <TableHead sx={{ backgroundColor: '#f5f5f5' }}>
                <TableRow>
                  <TableCell width="5%">#</TableCell>
                  <TableCell>Title</TableCell>
                  <TableCell>Goal</TableCell>
                  <TableCell>Signatures</TableCell>
                  <TableCell>Created At</TableCell>
                  <TableCell align="center">Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredPetitions.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={6} align="center">No petitions found</TableCell>
                  </TableRow>
                ) : (
                  filteredPetitions.map((petition, index) => (
                    <TableRow key={petition.id} hover>
                      <TableCell>{index + 1}</TableCell>
                      <TableCell>{petition.title || 'Untitled'}</TableCell>
                      <TableCell>{petition.goal || 'N/A'}</TableCell>
                      <TableCell>{petition.signature_count !== undefined ? petition.signature_count : 'N/A'}</TableCell>
                      <TableCell>{petition.created_at ? formatDate(petition.created_at) : 'N/A'}</TableCell>
                      <TableCell align="center">
                        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 1 }}>
                          <Button
                            variant="contained"
                            color="primary"
                            size="small"
                            onClick={() => handleViewPetition(petition.id)}
                            sx={{ 
                              color: '#fff',
                              backgroundColor: '#01BD9B',
                              '&:hover': {
                                backgroundColor: '#01a989'
                              }
                            }}
                            startIcon={<VisibilityIcon />}
                          >
                            View
                          </Button>
                          <Button
                            variant="contained"
                            color="error"
                            size="small"
                            onClick={() => handleDeleteClick(petition.id, 'petition')}
                            sx={{ 
                              color: '#fff',
                              backgroundColor: '#f44336',
                              '&:hover': {
                                backgroundColor: '#d32f2f'
                              }
                            }}
                            startIcon={<DeleteIcon />}
                          >
                            Delete
                          </Button>
                        </Box>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>
        
        <TabPanel value={tabValue} index={1}>
          <Box sx={{ mb: 3 }}>
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} md={4}>
                <TextField
                  fullWidth
                  label="Search Signatures"
                  variant="outlined"
                  size="small"
                  value={signatureSearchTerm}
                  onChange={(e) => setSignatureSearchTerm(e.target.value)}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <SearchIcon />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={3}>
                <FormControl fullWidth size="small">
                  <InputLabel>Sort By</InputLabel>
                  <Select
                    value={signatureSortBy}
                    label="Sort By"
                    onChange={(e) => setSignatureSortBy(e.target.value)}
                  >
                    <MenuItem value="created_at">Date Signed</MenuItem>
                    <MenuItem value="first_name">First Name</MenuItem>
                    <MenuItem value="last_name">Last Name</MenuItem>
                    <MenuItem value="email">Email</MenuItem>
                    <MenuItem value="phone">Phone</MenuItem>
                    <MenuItem value="zip_code">Zip Code</MenuItem>
                    <MenuItem value="location_city">City</MenuItem>
                    <MenuItem value="location_country">Country</MenuItem>
                    <MenuItem value="device_type">Device Type</MenuItem>
                    <MenuItem value="browser">Browser</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} md={3}>
                <FormControl fullWidth size="small">
                  <InputLabel>Order</InputLabel>
                  <Select
                    value={signatureSortOrder}
                    label="Order"
                    onChange={(e) => setSignatureSortOrder(e.target.value as 'asc' | 'desc')}
                  >
                    <MenuItem value="asc">Ascending</MenuItem>
                    <MenuItem value="desc">Descending</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} md={2}>
                <Button 
                  variant="contained" 
                  color="primary"
                  fullWidth
                  onClick={fetchData}
                  sx={{ 
                    color: '#fff',
                    backgroundColor: '#01BD9B',
                    '&:hover': {
                      backgroundColor: '#01a989'
                    }
                  }}
                  startIcon={<RefreshIcon />}
                >
                  Refresh
                </Button>
              </Grid>
            </Grid>
          </Box>
          
          <Box sx={{ mb: 2 }}>
            <Typography variant="h6">
              All Signatures ({filteredSignatures.length})
            </Typography>
          </Box>
          
          <TableContainer component={Paper} sx={{ mb: 4 }}>
            <Table>
              <TableHead sx={{ backgroundColor: '#f5f5f5' }}>
                <TableRow>
                  <TableCell width="5%">#</TableCell>
                  <TableCell>First Name</TableCell>
                  <TableCell>Last Name</TableCell>
                  <TableCell>Email</TableCell>
                  <TableCell>Petition</TableCell>
                  <TableCell>Location</TableCell>
                  <TableCell>Device</TableCell>
                  <TableCell>Signed At</TableCell>
                  <TableCell align="center">Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredSignatures.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={9} align="center">No signatures found</TableCell>
                  </TableRow>
                ) : (
                  filteredSignatures.map((signature, index) => (
                    <TableRow key={signature.id} hover>
                      <TableCell>{index + 1}</TableCell>
                      <TableCell>{signature.first_name || 'N/A'}</TableCell>
                      <TableCell>{signature.last_name || 'N/A'}</TableCell>
                      <TableCell>{signature.email}</TableCell>
                      <TableCell>{signature.petition_id}</TableCell>
                      <TableCell>
                        {signature.location_city ? (
                          <Tooltip 
                            title={
                              <React.Fragment>
                                {`${signature.location_city}, ${signature.location_region}, ${signature.location_country}
IP: ${signature.ip_address || 'Unknown'}
Lat/Long: ${signature.location_latitude || 'N/A'}, ${signature.location_longitude || 'N/A'}`}
                              </React.Fragment>
                            }
                          >
                            <span>{signature.location_city || 'Unknown'}</span>
                          </Tooltip>
                        ) : (
                          'Unknown'
                        )}
                      </TableCell>
                      <TableCell>
                        {signature.device_type ? (
                          <Tooltip 
                            title={
                              <React.Fragment>
                                {`Browser: ${signature.browser || 'Unknown'}
Device: ${signature.device_type || 'Unknown'}
Resolution: ${signature.screen_resolution || 'N/A'}
Language: ${signature.language || 'N/A'}
Timezone: ${signature.timezone || 'N/A'}`}
                              </React.Fragment>
                            }
                          >
                            <span>{signature.device_type || 'Unknown'}</span>
                          </Tooltip>
                        ) : (
                          'Unknown'
                        )}
                      </TableCell>
                      <TableCell>{formatDate(signature.created_at)}</TableCell>
                      <TableCell align="center">
                        <Button
                          variant="contained"
                          color="error"
                          size="small"
                          onClick={() => handleDeleteClick(signature.id, 'signature')}
                          sx={{ 
                            color: '#fff',
                            backgroundColor: '#f44336',
                            '&:hover': {
                              backgroundColor: '#d32f2f'
                            }
                          }}
                        >
                          Delete
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>
      </Paper>
      
      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteDialogOpen}
        onClose={handleDeleteCancel}
      >
        <DialogTitle>Confirm Deletion</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete this {itemToDelete?.type}? This action cannot be undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={handleDeleteCancel} 
            color="primary"
            sx={{ 
              color: '#01BD9B'
            }}
          >
            Cancel
          </Button>
          <Button 
            onClick={handleDeleteConfirm} 
            color="error" 
            autoFocus 
            sx={{ 
              color: '#fff',
              backgroundColor: '#f44336',
              '&:hover': {
                backgroundColor: '#d32f2f'
              }
            }}
          >
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};

export default AdminDashboard; 